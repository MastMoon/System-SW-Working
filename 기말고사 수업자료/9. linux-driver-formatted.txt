#include <linux/init.h>
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/fs.h>
#include <linux/uaccess.h>  /* 현대적인 커널을 위해 asm/uaccess.h 대신 사용 */
#include <linux/slab.h>
#include <linux/string.h>   /* memset, memcpy 함수용 */

#define DEVICE_MAJOR 300
#define DEVICE_NAME "test_device"
#define BUFFER_SIZE 1024

static char *buffer = NULL;

int test_open(struct inode *inode, struct file *filp) {
    printk(KERN_ALERT "test_device open function called\n");
    return 0;
}

int test_device_release(struct inode *inode, struct file *filp) {
    printk(KERN_ALERT "test_device release function called\n");
    return 0;
}

ssize_t test_device_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos) {
    ssize_t bytes_written;
    
    printk(KERN_ALERT "test_device write function called\n");
    
    if (count > BUFFER_SIZE)
        count = BUFFER_SIZE;
    
    bytes_written = copy_from_user(buffer, buf, count);
    if (bytes_written) {
        printk(KERN_ALERT "Failed to write %ld bytes\n", bytes_written);
        return -EFAULT;
    }
    
    *f_pos += count;
    return count;
}

ssize_t test_device_read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos) {
    ssize_t bytes_read;
    
    printk(KERN_ALERT "test_device read function called\n");
    
    if (count > BUFFER_SIZE)
        count = BUFFER_SIZE;
    
    bytes_read = copy_to_user(buf, buffer, count);
    if (bytes_read) {
        printk(KERN_ALERT "Failed to read %ld bytes\n", bytes_read);
        return -EFAULT;
    }
    
    *f_pos += count;
    return count;
}

static struct file_operations vd_fops = {
    .read = test_device_read,
    .write = test_device_write,
    .open = test_open,
    .release = test_device_release
};

int __init test_device_init(void) {
    int result;
    
    buffer = kmalloc(BUFFER_SIZE, GFP_KERNEL);
    if (!buffer) {
        printk(KERN_ALERT "Failed to allocate memory\n");
        return -ENOMEM;
    }
    
    memset(buffer, 0, BUFFER_SIZE);
    
    result = register_chrdev(DEVICE_MAJOR, DEVICE_NAME, &vd_fops);
    if (result < 0) {
        printk(KERN_ALERT "Driver init failed with error code %d\n", result);
        kfree(buffer);
        return result;
    }
    
    printk(KERN_ALERT "Driver init successful\n");
    return 0;
}

void __exit test_device_exit(void) {
    unregister_chrdev(DEVICE_MAJOR, DEVICE_NAME);
    printk(KERN_ALERT "Driver cleanup successful\n");
    
    if (buffer)
        kfree(buffer);
}

module_init(test_device_init);
module_exit(test_device_exit);
MODULE_LICENSE("GPL");